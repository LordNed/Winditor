<#
		string[] ItemEnumDataTypeNames = {"ItemID", "DroppedItemID", "OnlyTableDroppedItemID"};
		string EscapeIdentifier(string input)
		{
			string output = Regex.Replace(input, @"&", "and", RegexOptions.IgnoreCase);
			output = Regex.Replace(output, @"[^a-z0-9_]", "", RegexOptions.IgnoreCase);
			return output;
		}
		string EscapeStringLiteral(string input)
		{
			string output = Regex.Replace(input, @"([""\\])", @"\$1"); // Escape quotes and backslashes
			output = Regex.Replace(output, @"([\n])", "\\n", RegexOptions.IgnoreCase);
			output = Regex.Replace(output, @"([\0\a\b\f\r\t\v])", "", RegexOptions.IgnoreCase);
			return "\"" + output + "\"";
		}
		string EscapeEnumName(string input) {
			string sanitizedValue = input.Replace(" ", "_");
			sanitizedValue = EscapeIdentifier(sanitizedValue);
			if (Char.IsDigit(sanitizedValue[0])) {
				// Identifiers can't start with a number.
				sanitizedValue = "_" + sanitizedValue;
			}
			return sanitizedValue;
		}
		string GetDefaultValueSetter(string fieldName, object defaultValue, string jsonDataType, string codeDataType) {
			if (jsonDataType == "Enum" || ItemEnumDataTypeNames.Contains(jsonDataType)) {
				return $"{fieldName} = {codeDataType}.{EscapeEnumName(defaultValue as string)};";
			} else if (jsonDataType == "Boolean") {
				return $"{fieldName} = {((bool)defaultValue ? "true" : "false")};";
			} else {
				return $"{fieldName} = {defaultValue};";
			}
		}

		Dictionary<string, string> paramTypes = new Dictionary<string, string>();
		List<string> defaultValueSetters = new List<string>();
		Dictionary<string, List<string>> nameSpecificDefaultValueSetters = new Dictionary<string, List<string>>();
		var typeSpecificCategories = new Dictionary<string, Dictionary<object, List<string>>>();

		if (descriptor.ParameterFields == null)
			descriptor.ParameterFields = new ActorBitfieldDescriptor[0];
		foreach(var field in descriptor.ParameterFields)
		{
			if(skippedFields.Contains(field.FieldName.Replace(" ", "")))
				continue; 

			string fieldName = EscapeIdentifier(field.FieldName);
			string valueSource = String.IsNullOrEmpty(field.ValueSource) ? "Parameters" : field.ValueSource;
			valueSource = EscapeIdentifier(valueSource);
			string privateValueSource = "m_" + valueSource;
			string privateFieldName = "m_" + fieldName;
			string overrideName = field.FieldName == "Name" ? "override" : "";
			string categoryName = field.CategoryName != null ? field.CategoryName : "Misc.";

			int bitShift = 0;
			for (int i = 0; i < 32; i++) {
				if ((field.BitMask & (1 << i)) != 0) {
					bitShift = i;
					break;
				}
			}
			
			int bitMaskSize = 0;
			for (int i = 0; i < 32; i++) {
				if ((field.BitMask & (1 << i)) != 0) {
					bitMaskSize++;
				}
			}

			int defaultEnumValue = field.EnumDefaultValue;

			bool defaultBooleanValue = field.BooleanDefaultValue;
			int[] boolNonDefaults = new int[] {0, 0xFF};
			if (field.BooleanNonDefaults != null) {
				boolNonDefaults = field.BooleanNonDefaults;
			}
			int boolCanonicalIntRepresentationOfTrue = 1;
			int boolCanonicalIntRepresentationOfFalse = 0;
			if (defaultBooleanValue == true) {
				boolCanonicalIntRepresentationOfFalse = boolNonDefaults[0];
				for (int i = 0; i <= 0xFF; i++) {
					if (boolNonDefaults.Contains(i))
						continue;
					boolCanonicalIntRepresentationOfTrue = i;
					break;
				}
			} else {
				boolCanonicalIntRepresentationOfTrue = boolNonDefaults[0];
				for (int i = 0; i <= 0xFF; i++) {
					if (boolNonDefaults.Contains(i))
						continue;
					boolCanonicalIntRepresentationOfFalse = i;
					break;
				}
			}

			if (!fieldNameToOutputDataType.ContainsKey(valueSource)) {
				throw new ArgumentException($"Invalid parameter value source: {valueSource}");
			}
			string valueSourceType = fieldNameToOutputDataType[valueSource];
			string bitMaskHex = null;
			if (valueSourceType == "int") {
				bitMaskHex = String.Format("0x{0:X8}", field.BitMask);
			} else if (valueSourceType == "short") {
				bitMaskHex = String.Format("0x{0:X4}", field.BitMask);
			} else if (valueSourceType == "byte") {
				bitMaskHex = String.Format("0x{0:X2}", field.BitMask);
			}
			string sourceScene;
			switch (field.DataType)
			{
				case "Event":
				case "StageExit":
					sourceScene = "SourceScene.Stage";
					break;
				default:
					sourceScene = "SourceScene.Room";
					break;
			}
			string dataType;
			switch (field.DataType)
			{
				case "Integer":
				case "SignedInteger":
					dataType = "int";
					break;
				case "Boolean":
					dataType = "bool";
					break;
				case "Path":
				case "StagePath":
					dataType = "Path_v2";
					break;
				case "Exit":
				case "StageExit":
					dataType = "ExitData";
					break;
				case "Event":
					dataType = "MapEvent";
					break;
				case "Enum":
					dataType = fieldName + "Enum";

					if (field.EnumValues == null)
					{
						throw new InvalidDataException($"Field \"{field.FieldName}\" in file \"{file}\" specifies Enum data type, but does not list any EnumValues");
					}
#>
		public enum <#= dataType #>
		{
<#
					foreach (var item in field.EnumValues)
					{
						string sanitizedValue = EscapeEnumName(item.Value);
#>
			<#= sanitizedValue #> = <#= item.Key #>,
<#
					}
#>
		}

<#

					break;
				case "ItemID":
					dataType = "ItemID";
					break;
				case "DroppedItemID":
					dataType = "DroppedItemID";
					break;
				case "OnlyTableDroppedItemID":
					dataType = "OnlyTableDroppedItemID";
					break;
				default:
					throw new InvalidDataException($"Invalid data type \"{field.DataType}\" specified for field \"{field.FieldName}\" in file \"{file}\"");
			}

			paramTypes[fieldName] = dataType;

			object defaultValue = field.DefaultValue;
			if (defaultValue != null) {
				defaultValueSetters.Add(GetDefaultValueSetter(fieldName, defaultValue, field.DataType, dataType));
			} else if (field.DataType == "Integer" || field.DataType == "SignedInteger") {
				defaultValueSetters.Add($"{fieldName} = -1;");
			} else if (field.DataType == "Path" || field.DataType == "StagePath" || field.DataType == "Exit" || field.DataType == "StageExit" || field.DataType == "Event") {
				defaultValueSetters.Add($"{fieldName} = null;");
			} else if (ItemEnumDataTypeNames.Contains(field.DataType)) {
				defaultValueSetters.Add($"{fieldName} = {field.DataType}.No_item;");
			}

			if (field.DefaultsByActorName != null) {
				foreach (KeyValuePair<string, object> entry in field.DefaultsByActorName) {
					if (!nameSpecificDefaultValueSetters.ContainsKey(entry.Key))
						nameSpecificDefaultValueSetters[entry.Key] = new List<string>();

					nameSpecificDefaultValueSetters[entry.Key].Add(GetDefaultValueSetter(fieldName, entry.Value, field.DataType, dataType));
				}
			}

			if (field.TypeSpecificCategories != null) {
				if (!typeSpecificCategories.ContainsKey(fieldName)) {
					typeSpecificCategories[fieldName] = new Dictionary<object, List<string>>();
				}
				foreach (var item in field.TypeSpecificCategories)
				{
					string typeName = EscapeEnumName(item.Key);
					string[] catNames = item.Value;
					typeSpecificCategories[fieldName][typeName] = catNames.ToList();
				}
			}
#>
<#		 // We hide padding and other fields that the user doesn't need to see/change.
		if(!field.IsHidden)
		{
#>

		[WProperty("<#= categoryName #>", "<#= field.FieldName #>", true, <#= field.ToolTip == null ? "\"\"" : EscapeStringLiteral(field.ToolTip) #>, <#= sourceScene #>)]
<# 
		}
#>
		<#= overrideName #>public <#= dataType #> <#= fieldName #>
		{ 
			get
			{
				int value_as_int = (int)((<#= privateValueSource #> & <#= bitMaskHex #>) >> <#= bitShift #>);
<#
				switch (field.DataType)
				{
					case "Integer":
#>
				return value_as_int;
<#
						break;
					case "SignedInteger":
#>
				if (value_as_int > <#= (1 << (bitMaskSize - 1)) - 1 #>) {
					return value_as_int - <#= 1 << bitMaskSize #>;
				} else {
					return value_as_int;
				}
<#
						break;
					case "Boolean":
						bool onFirst = true;
						foreach (int non_default_val in boolNonDefaults) {
#>
				<#= onFirst ? "" : "} else " #>if (value_as_int == <#= non_default_val #>) {
					return <#= defaultBooleanValue ? "false" : "true" #>;
<#
							onFirst = false;
						}
#>
				} else {
					return <#= defaultBooleanValue ? "true" : "false" #>;
				}
<#
						break;
					case "Path":
					case "Exit":
#>
				if (value_as_int == 0xFF) { return null; }
				WDOMNode cur_object = this;
				while (cur_object.Parent != null)
				{
					cur_object = cur_object.Parent;
				}
				List<<#= dataType #>> list = cur_object.GetChildrenOfType<<#= dataType #>>();
				if (value_as_int >= list.Count) { return null; }
				return list[value_as_int];
<#
						break;
					case "Event":
					case "StagePath":
					case "StageExit":
#>
				if (value_as_int == 0xFF) { return null; }
				WStage stage = World.Map.SceneList.First(x => x.GetType() == typeof(WStage)) as WStage;
				List<<#= dataType #>> list = stage.GetChildrenOfType<<#= dataType #>>();
				if (value_as_int >= list.Count) { return null; }
				return list[value_as_int];
<#
						break;
					case "Enum":
					case "ItemID":
					case "DroppedItemID":
					case "OnlyTableDroppedItemID":
#>
				if (!Enum.IsDefined(typeof(<#= dataType #>), value_as_int))
					value_as_int = <#= defaultEnumValue #>;
				return (<#= dataType #>)value_as_int;
<#
						break;
					default:
						throw new InvalidDataException($"Invalid data type \"{field.DataType}\" specified for field \"{field.FieldName}\" in file \"{file}\"");
				}
#>
			}

			set
			{
<#
				switch (field.DataType)
				{
					case "Integer":
					case "SignedInteger":
#>
				int value_as_int = value;
<#
						break;
					case "Boolean":
#>
				int value_as_int = value ? <#= boolCanonicalIntRepresentationOfTrue #> : <#= boolCanonicalIntRepresentationOfFalse #>;
<#
						break;
					case "Path":
					case "Exit":
#>
				WDOMNode cur_object = this;
				while (cur_object.Parent != null)
				{
					cur_object = cur_object.Parent;
				}
				List<<#= dataType #>> list = cur_object.GetChildrenOfType<<#= dataType #>>();
				int value_as_int = list.IndexOf(value);
<#
						break;
					case "Event":
					case "StagePath":
					case "StageExit":
#>
				WStage stage = World.Map.SceneList.First(x => x.GetType() == typeof(WStage)) as WStage;
				List<<#= dataType #>> list = stage.GetChildrenOfType<<#= dataType #>>();
				int value_as_int = list.IndexOf(value);
<#
						break;
					case "Enum":
					case "ItemID":
					case "DroppedItemID":
					case "OnlyTableDroppedItemID":
#>
				int value_as_int = (int)value;
<#
						break;
					default:
						throw new InvalidDataException($"Invalid data type \"{field.DataType}\" specified for field \"{field.FieldName}\" in file \"{file}\"");
				}
#>
				<#= privateValueSource #> = (<#= valueSourceType #>)(<#= privateValueSource #> & ~<#= bitMaskHex #> | (value_as_int << <#= bitShift #> & <#= bitMaskHex #>));
				OnPropertyChanged("<#=fieldName#>");
				OnPropertyChanged("<#=valueSource#>");
<#
				if (field.UpdateModel) {
#>
				UpdateModel();
<#
				}
#>
			}
		}
<#		}#>