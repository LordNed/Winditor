<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json"#>
<#@ assembly name="$(SolutionDir)/bin/Debug/x86/Winditor/GameFormatReader.dll"#>
<#@ assembly name="$(TargetPath)"#>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="WindEditor" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="GameFormatReader.Common" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>

<#

var ProjectDirPath = Host.ResolveAssemblyReference("$(ProjectDir)");
var TemplatePath = ProjectDirPath + "resources/templates/MapEntityData";

#>
using GameFormatReader.Common;
using OpenTK;
using System.ComponentModel;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using WindEditor.ViewModel;

namespace WindEditor
{
<#

// We sometimes have duplicate templates to handle loading from the file, so we'll not generate duplicate classes.
List<string> usedClassNames = new List<string>();
foreach (var file in Directory.GetFiles(TemplatePath))
{
    ActorDataDescriptor descriptor = JsonConvert.DeserializeObject<ActorDataDescriptor>(File.ReadAllText(file));
	string className = descriptor.ClassName;
	string parentClassName = string.IsNullOrEmpty(descriptor.ParentClassOverride) ? "Actor" : descriptor.ParentClassOverride;
#>
	// AUTO-GENERATED, MODIFICATIONS TO THIS FILE WILL BE LOST
	public partial class <#= className #> : <#= parentClassName #>
	{
		// Auto-Generated Properties from Templates
<#
		// We skip these fields as they're pulled out in the load function and we don't want duplicate properties.
		var skippedFields = new List<string>(new []{"Position", "XRotation", "YRotation", "ZRotation", "XScale", "YScale", "ZScale"});

		var fieldNameToOutputDataType = new Dictionary<string, string> {
			{"Parameters", "int"},
			{"XRotation", "short"},
			{"YRotation", "short"},
			{"ZRotation", "short"},
		};
#>
<#@ include file="ParameterTemplates.tt" #>

		// Constructor
		public <#= className #>(FourCC fourCC, WWorld world) : base(fourCC, world)
		{
			Transform.UsesXRotation = <#= descriptor.ParameterFields.Any(x => x.ValueSource == "XRotation") ? "false" : "true" #>;
			Transform.UsesYRotation = <#= descriptor.ParameterFields.Any(x => x.ValueSource == "YRotation") ? "false" : "true" #>;
			Transform.UsesZRotation = <#= descriptor.ParameterFields.Any(x => x.ValueSource == "ZRotation") ? "false" : "true" #>;
			Transform.RotationOrder = "<#= descriptor.RotationOrder #>";

<#
		foreach(var field in descriptor.ParameterFields)
		{
#>			RegisterValueSourceFieldProperty("<#= field.ValueSource #>", "<#= EscapeIdentifier(field.FieldName) #>");
<#
		}
#>
            
<#
				foreach (KeyValuePair<string, Dictionary<object, List<string>>> fieldEntry in typeSpecificCategories) {
					var typeFieldName = fieldEntry.Key;
					var typeValueCategories = fieldEntry.Value;
#>
			TypeSpecificCategories["<#= typeFieldName #>"] = new Dictionary<object, string[]>();
<#
					foreach (KeyValuePair<object, List<string>> typeValueEntry in typeValueCategories) {
						var enumValName = typeValueEntry.Key;
						var categoryNames = typeValueEntry.Value;

						string list_initializer = "";
						if (categoryNames.Count > 0) {
							list_initializer = '"' + String.Join("\", \"", categoryNames) + '"';
						}
#>
			TypeSpecificCategories["<#= typeFieldName #>"][<#= typeFieldName #>Enum.<#= enumValName #>] = new string[] { <#= list_initializer #> };
<#
					}
				}
#>
		}
<#
		if (defaultValueSetters.Count > 0 || nameSpecificDefaultValueSetters.Count > 0) {
#>

		override public void PopulateDefaultProperties()
		{
			base.PopulateDefaultProperties();
<#			foreach(var defaultValueSetter in defaultValueSetters)
			{
#>
			<#= defaultValueSetter #>
<#			}
#>
<#			if (nameSpecificDefaultValueSetters.Count > 0) {
				foreach (KeyValuePair<string, List<string>> entry in nameSpecificDefaultValueSetters) {
#>
			if (Name == "<#= entry.Key #>") {
<#					foreach (string defaultValueSetter in entry.Value) {
#>
				<#= defaultValueSetter #>
<#					}
#>
			}
<#				}
			}
#>
		}
<#
		}
#>
	}

<#
}
#>

} // namespace WindEditor
